{"version":3,"sources":["img/DOOD_Logo600.png","panel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","panel","className","loadUsers","fetch","then","res","ok","Promise","reject","json","App","props","handleSubmit","a","method","headers","body","JSON","stringify","state","login","password","response","console","log","catch","error","Iflogin","client","token","ServerBackend","DoodLogo","clientID","message","BDDGetclient","bind","handleChange","handleChangePa","event","this","setState","target","value","onSubmit","type","name","onChange","class","onClick","IDclient","promiseFn","data","err","isLoading","i","length","Newdata","renderlogo","rendercondition","condition","src","logo","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5eeff45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DOOD_Logo600.42ae8c20.png\";","import React from 'react';\n\nimport './App.css';\n\n\n\n\n\n\nfunction panel() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n <p>Panel</p>\n      </header>\n    </div>\n  );\n}\n\nexport default panel;\n","import React, { Component } from 'react'\nimport  './App.css'\n\nimport logo from './img/DOOD_Logo600.png';\nimport panel from './panel';\nimport Async from 'react-async';\n\nconst loadUsers = () =>\n  fetch(\"http://public.valjang.fr:5000/client\")\n    .then(res => (res.ok ? res : Promise.reject(res)))\n    .then(res => res.json())\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      Iflogin:false,\n      client:\"[no select]\",\n      token : \"\",\n      ServerBackend: \"http://public.valjang.fr:5000\",\n      DoodLogo :true,\n      clientID:\"0\",\n   \n      login: '',\n      password:'',\n      message:'',\n      \n    }\n    this.BDDGetclient = this.BDDGetclient.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangePa = this.handleChangePa.bind(this);\n  \n  }\n//send Login and password to backend\nhandleSubmit= async () => {\n  \n  fetch('http://public.valjang.fr:5000/user/login', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      'email': this.state.login,\n      'password': this.state.password,\n    })\n  })\n  \n    .then(function (response) {\n      \n      console.log(response);\n      \n  \n    \n    })\n    \n    .catch(function (error) {\n      console.log(error);\n    });\n   // this.setState({  Iflogin:this.res[\"ok\"]})\n};\n\nhandleChange(event) { this.setState({ login: event.target.value })\nconsole.log(this.state.login) };\n\nhandleChangePa(event) { \n  console.log(\"RESULTAT: \"+this.handleSubmit())\n  this.setState({ \n  password: event.target.value, \n\n  \n})\nconsole.log(this.state.password) };\n\nlogin(){\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Login :\n      <input type=\"text\" name=\"login\" value={this.state.login}  onChange={this.handleChange}/>\n          </label>\n          <br></br>\n          <label>\n            password :\n      <input type=\"password\" name=\"password\" value={this.state.password}  onChange={this.handleChangePa}/>\n          </label>\n\n          <br></br>\n\n          <input class=\"favorite styled\" type=\"button\" name=\"Loginbtn\" value=\"Login\" onClick={this.handleSubmit() }/>\n\n        </form>\n      </header>\n    </div>\n\n  );\n}\n\n\n\n\n\n\n\n  BDDGetclient(IDclient) {\n    \n    if (IDclient)\n    return (\n      <Async promiseFn={loadUsers}>\n      {({ data, err, isLoading }) => {\n        if (isLoading) return (\"Chargement...\")\n        if (err) return `Backend Hors service :'( : ${err.message}`\n\n        if (data){\n        var client =\"\" \n        for (var i = 0; i < data.length; i++) {\n          var Newdata = data[IDclient]\n          if(client ==\"\" ){\n            client= Newdata[\"name\"]\n          }\n        }\n        \n         \n      }\n          return (\n            <div>\n            \n             {this.renderlogo(true)}\n             \n                    <p>Login to {client} Viewer</p>\n                 <p>{this.state.message}</p>\n                    {this.rendercondition() // rendu dynamique des pages\n}\n            </div>\n          )\n      }}\n    </Async>\n    )\n}\n\n\n\n\n  \n\n renderlogo (condition){\n    let result = \"\"\n    if (condition === true){\n     result =<img src={logo} className=\"App-logo\"/>\n    }else{\n      result = \"\"\n    }\n    \n  return(result)\n  }\n\nrendercondition(){\n  if(this.state.Iflogin == false){\n    return(this.login())\n  }else if(this.state.Iflogin == false){\n    return(panel())\n  }else{\n    return(\"Err: BackEnd: Invalid reponses: \"+this.state.Iflogin)\n  }\n}\n\n\n \n  render() {\n  \n    \n   \n    return (\n \n      <div className=\"App\">\n      <header className=\"App-header\">\n    \n      \n      <p>{this.BDDGetclient(this.state.clientID)} </p>\n\n     \n\n\n     \n      \n      </header>\n  \n  \n    </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}